buildscript {
    repositories {
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "com.netflix.nebula:gradle-extra-configurations-plugin:3.1.0"
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.2'
    }
}

subprojects {

    apply plugin: 'groovy'
    apply plugin: 'checkstyle'
    apply plugin: 'codenarc'
    apply plugin: 'jacoco'
    apply plugin: 'nebula.provided-base'
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.bintray'

    logger.info(System.getProperty("java.home"))

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    group = 'org.playerhook'
    version = '0.1.0-alpha-14'

    repositories {
        jcenter()
        mavenCentral()
        maven {
            url  'http://dl.bintray.com/jasan/space'
        }
    }

    dependencies {
        // immutable data structures should be preferred to any other data structures
        compile group: 'com.google.guava', name: 'guava', version: '19.0'
        // Observables should be preferred to other way of handling asynchronous code
        compile group: 'io.reactivex', name: 'rxjava', version: '1.1.9'

        compile group: 'space.jasan', name: 'groovy-closure-support', version: '0.2.0'

        testCompile 'org.spockframework:spock-core:1.0-groovy-2.4'
        testCompile 'cglib:cglib-nodep:2.2'

    }

    checkstyle {
        configFile = rootProject.file('config/checkstyle/checkstyle.xml')
    }

    codenarc {
        configFile = rootProject.file('config/codenarc.xml')
    }


    if (System.getenv('CIRCLE_TEST_REPORTS')) {
        File reportsDir = new File(project.buildDir, 'reports')
        File jacocoDir = new File(project.buildDir, 'jacoco')
        File testResultsDir = new File(project.buildDir, 'test-results')
        task copyTestResults(type: Copy) {
            from reportsDir.absolutePath
            from jacocoDir
            from testResultsDir
            into "${System.getenv('CIRCLE_TEST_REPORTS')}/${project.name}/"
        }

        test {
            reports {
                junitXml.enabled = true
                html.enabled = true
            }
        }

        test.finalizedBy copyTestResults
    }


    // publishing
    publishing {
        publications {
            groovyMaven(MavenPublication) {
                from components.java

                artifact sourcesJar {
                    classifier "sources"
                }

                artifact javadocJar {
                    classifier "javadoc"
                }
            }
        }
    }

// set bintrayUser & bintrayKey in gradle.properties
    bintray {

        user = getPropertyOrUseDefault('bintrayUser', 'fake_user')
        key = getPropertyOrUseDefault('bintrayKey', 'fake_key')
        publications = ['groovyMaven']

        def projectName = project.name
        def projectDescription = project.description

        pkg {
            websiteUrl = 'https://github.com/playerhook/games'
            issueTrackerUrl = 'https://github.com/playerhook/games/issues'
            vcsUrl = 'https://github.com/playerhook/games.git'

            repo = 'maven' // or your repo name
            userOrg = 'playerhook'
            name = projectName       // somehow project.* doesn't work in this closure
            desc = projectDescription
            licenses = ['Apache-2.0']
        }
        // dryRun = true // whether to run this as dry-run, without deploying
    }

    // custom tasks for creating source/javadoc jars
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar, javadocJar
    }

    bintrayUpload.dependsOn check

}

String getPropertyOrUseDefault(String propertyName, String defaultValue) {
    hasProperty(propertyName) ? getProperty(propertyName) : defaultValue
}
